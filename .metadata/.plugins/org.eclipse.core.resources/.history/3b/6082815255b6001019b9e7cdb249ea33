package com.monkcommerce.couponservice.service.impl;
import java.util.*;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.monkcommerce.couponservice.dto.CartItem;
import com.monkcommerce.couponservice.dto.CartRequest;
import com.monkcommerce.couponservice.dto.response.UpdatedCartItemResponse;
import com.monkcommerce.couponservice.dto.response.UpdatedCartResponse;
import com.monkcommerce.couponservice.entity.BxGyCoupon;
import com.monkcommerce.couponservice.entity.CartWiseCoupon;
import com.monkcommerce.couponservice.entity.Coupon;
import com.monkcommerce.couponservice.entity.ProductWiseCoupon;
import com.monkcommerce.couponservice.repository.CouponRepository;
import com.monkcommerce.couponservice.service.CouponService;

import jakarta.persistence.EntityNotFoundException;

@Service
public class CouponApplicationService {

	 @Autowired
	 private CouponRepository couponRepository;

	 @Autowired
	 private CouponServiceFactory couponServiceFactory;

	 public String applyCoupon(String type, CartRequest cart) 
	 {
	     Coupon coupon = couponRepository.findByType(type)
	     .orElseThrow(() -> new RuntimeException("Coupon not found"));

	     CouponService service = couponServiceFactory.getService(coupon);

	     if (!service.isApplicable(coupon, cart)) {
	    	 return "Coupon not applicable";
	     }
	            

	     double discount = service.calculateDiscount(coupon, cart);
	     return "Coupon applied successfully. Discount: " + discount;
	 }
	 
	 public Coupon createCoupon(String type, Map<String, Object> details) {
		 
		Coupon coupon;
		switch (type) {
     		case "cart-wise":
     			CartWiseCoupon cwc = new CartWiseCoupon();
     			cwc.setType(type);
     			cwc.setThresholdAmount(Double.valueOf(details.get("threshold").toString()));
     			cwc.setDiscountPercent(Double.valueOf(details.get("discount").toString()));
     			coupon=cwc;
     			break;
     		case "product-wise":
     			ProductWiseCoupon pwc=new ProductWiseCoupon();
     			pwc.setType(type);
                pwc.setProductId(Long.valueOf(details.get("product_id").toString()));
                pwc.setDiscountPercent(Double.valueOf(details.get("discount").toString()));
                coupon=pwc;
                break;
     		case "bxgy":
     			BxGyCoupon bxgy=new BxGyCoupon();
     			bxgy.setType(type);
     			
     			List<Map<String, Object>> buyProducts = (List<Map<String, Object>>) details.get("buy_products");
     		    List<Map<String, Object>> getProducts = (List<Map<String, Object>>) details.get("get_products");

     		    Map<Long, Integer> buyMap = buyProducts.stream()
     		        .collect(Collectors.toMap(
     		            p -> Long.valueOf(p.get("product_id").toString()),
     		            p -> ((Number) p.get("quantity")).intValue()
     		        ));

     		    Map<Long, Integer> getMap = getProducts.stream()
     		        .collect(Collectors.toMap(
     		            p -> Long.valueOf(p.get("product_id").toString()),
     		            p -> ((Number) p.get("quantity")).intValue()
     		        ));

     		    bxgy.setBuyProducts(buyMap);
     		    bxgy.setGetProducts(getMap);
     		    bxgy.setRepetitionLimit(((Number) details.get("repition_limit")).intValue());

     		    coupon = bxgy;
     			break;
     		
     		default:
     			throw new RuntimeException("Invalid coupon type: " + type);
		}
		
		Coupon saved = couponRepository.save(coupon);
		return saved;
	 
	 }

	public Map<String, Object> getApplicableCoupons(Map<String, Object> cartMap) {
		List<Map<String, Object>> itemMaps = (List<Map<String, Object>>) cartMap.get("items");
        List<CartItem> items = itemMaps.stream()
                .map(i -> new CartItem(
                        Long.valueOf(i.get("product_id").toString()),
                        ((Number) i.get("quantity")).intValue(),
                        Double.valueOf(i.get("price").toString())
                ))
                .collect(Collectors.toList());

        CartRequest cart = new CartRequest();
        cart.setItems(items);

        List<Coupon> coupons = couponRepository.findAll();
        List<Map<String, Object>> applicableCoupons = new ArrayList<>();
        System.out.println(cart);
        System.out.println(coupons);
        for (Coupon c : coupons) {
            var service = couponServiceFactory.getService(c);

            if (service.isApplicable(c, cart)) {
                double discount = service.calculateDiscount(c, cart);
                Map<String, Object> couponInfo = new HashMap<>();
                couponInfo.put("coupon_id", c.getId());
                couponInfo.put("type", c.getType());
                couponInfo.put("discount", discount);
                applicableCoupons.add(couponInfo);
            }
        }

        Map<String, Object> response = new HashMap<>();
        response.put("applicable_coupons", applicableCoupons);

        return response;
	}

	public UpdatedCartResponse applyCouponAndReturnCart(Map<String, Object> request, Long id) {
		
		 Coupon coupon = couponRepository.findById(id)
		            .orElseThrow(() -> new RuntimeException("Coupon not found"));
		 Map<String, Object> cartMap = (Map<String, Object>) request.get("cart");
		    List<Map<String, Object>> items = (List<Map<String, Object>>) cartMap.get("items");

		    List<CartItem> cartItems = items.stream()
		            .map(i -> new CartItem(
		                    Long.valueOf(i.get("product_id").toString()),
		                    ((Number) i.get("quantity")).intValue(),
		                    Double.valueOf(i.get("price").toString())
		            ))
		            .toList();

		    CartRequest cart = new CartRequest();
		    cart.setItems(cartItems);
		    
		    CouponService service = couponServiceFactory.getService(coupon);
		    
		    if (!service.isApplicable(coupon, cart)) {
		        throw new RuntimeException("Coupon not applicable for this cart");
		    }
		    
		    double discount = service.calculateDiscount(coupon, cart);

		    double totalPrice = 0.0;
		    for (CartItem item : cart.getItems()) {
		        totalPrice += item.getPrice() * item.getQuantity();
		    }

		    double totalDiscount = discount;
		    double finalPrice = totalPrice - totalDiscount;
		    
		    List<UpdatedCartItemResponse> itemList = cart.getItems().stream()
		            .map(i -> new UpdatedCartItemResponse(
		                    i.getProductId(),
		                    i.getQuantity(),
		                    i.getPrice(),
		                    0.0 
		            ))
		            .toList();
		    
		    if(coupon instanceof ProductWiseCoupon) {
		    	ProductWiseCoupon c = (ProductWiseCoupon) coupon;
		    	for(UpdatedCartItemResponse uci:itemList) {
		    		if(c.getProductId()==uci.getProductId())
		    			uci.setTotalDiscount((uci.getPrice() * uci.getQuantity() * c.getDiscountPercent() / 100));
		    	}
		    }
		    
		    UpdatedCartResponse updatedCart = new UpdatedCartResponse();
		    updatedCart.setItems(itemList);
		    updatedCart.setTotalPrice(totalPrice);
		    updatedCart.setTotalDiscount(totalDiscount);
		    updatedCart.setFinalPrice(finalPrice);
		    
		    if (coupon instanceof BxGyCoupon bxgy) {
		        applyBxGyFreeItems(bxgy, cart, itemList, discount);
		        updatedCart.setTotalPrice(totalPrice+discount);
		        updatedCart.setFinalPrice(updatedCart.getTotalPrice()-discount);
		    } 
		    
		    return updatedCart;
		
	}
	
	private void applyBxGyFreeItems(BxGyCoupon bxgy, CartRequest cart, List<UpdatedCartItemResponse> items, double discount) {
	
		int totalRepetitions = 0;

	    for (CartItem item : cart.getItems()) {
	        Integer requiredQty = bxgy.getBuyProducts().get(item.getProductId());
	        if (requiredQty != null && requiredQty > 0) {
	            int reps = item.getQuantity() / requiredQty;
	            totalRepetitions += reps;
	        }
	    }

	    totalRepetitions = Math.min(totalRepetitions, bxgy.getRepetitionLimit());

	    for (UpdatedCartItemResponse item : items) {
	        if (bxgy.getGetProducts().containsKey(item.getProductId())) {
	            int freeQtyPerRepetition = bxgy.getGetProducts().get(item.getProductId());
	            int totalFreeQty = freeQtyPerRepetition * totalRepetitions;

	            item.setQuantity(item.getQuantity() + totalFreeQty);
	            item.setTotalDiscount(item.getPrice() * totalFreeQty);
	        }
	    }
	}

	public List<Coupon> getAllCoupons() {
		return couponRepository.findAll();
	}

	public Coupon getCouponById(Long id) {
		return couponRepository.findById(id)
                .orElseThrow(() -> new EntityNotFoundException("Coupon not found with ID: " + id));
	}

	public Coupon updateCoupon(Long id, Coupon updatedCoupon) {
		Coupon existingCoupon = couponRepository.findById(id)
                .orElseThrow(() -> new EntityNotFoundException("Coupon not found with ID: " + id));

        existingCoupon.setType(updatedCoupon.getType());

        return couponRepository.save(existingCoupon);
	}

	public void deleteCoupon(Long id) {
		// TODO Auto-generated method stub
		
	}
	
	
	 
}
