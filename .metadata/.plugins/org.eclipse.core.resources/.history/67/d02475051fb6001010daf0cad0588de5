package com.monkcommerce.couponservice.service.impl;
import java.util.*;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.monkcommerce.couponservice.dto.CartItem;
import com.monkcommerce.couponservice.dto.CartRequest;
import com.monkcommerce.couponservice.entity.BxGyCoupon;
import com.monkcommerce.couponservice.entity.CartWiseCoupon;
import com.monkcommerce.couponservice.entity.Coupon;
import com.monkcommerce.couponservice.entity.ProductWiseCoupon;
import com.monkcommerce.couponservice.repository.CouponRepository;
import com.monkcommerce.couponservice.service.CouponService;

@Service
public class CouponApplicationService {

	 @Autowired
	 private CouponRepository couponRepository;

	 @Autowired
	 private CouponServiceFactory couponServiceFactory;

	 public String applyCoupon(String type, CartRequest cart) 
	 {
	     Coupon coupon = couponRepository.findByType(type)
	     .orElseThrow(() -> new RuntimeException("Coupon not found"));

	     CouponService service = couponServiceFactory.getService(coupon);

	     if (!service.isApplicable(coupon, cart)) {
	    	 return "Coupon not applicable";
	     }
	            

	     double discount = service.calculateDiscount(coupon, cart);
	     return "Coupon applied successfully. Discount: " + discount;
	 }
	 
	 public Coupon createCoupon(String type, Map<String, Object> details) {
		 
		Coupon coupon;
		switch (type) {
     		case "cart-wise":
     			CartWiseCoupon cwc = new CartWiseCoupon();
     			cwc.setType(type);
     			cwc.setThresholdAmount(Double.valueOf(details.get("threshold").toString()));
     			cwc.setDiscountPercent(Double.valueOf(details.get("discount").toString()));
     			coupon=cwc;
     			break;
     		case "product-wise":
     			ProductWiseCoupon pwc=new ProductWiseCoupon();
     			pwc.setType(type);
                pwc.setProductId(Long.valueOf(details.get("product_id").toString()));
                pwc.setDiscountPercent(Double.valueOf(details.get("discount").toString()));
                coupon=pwc;
                break;
     		case "bxgy":
     			BxGyCoupon bxgy=new BxGyCoupon();
     			bxgy.setType(type);
     			
     			List<Map<String, Object>> buyProducts = (List<Map<String, Object>>) details.get("buy_products");
     		    List<Map<String, Object>> getProducts = (List<Map<String, Object>>) details.get("get_products");

     		    // Convert to Map<Long, Integer>
     		    Map<Long, Integer> buyMap = buyProducts.stream()
     		        .collect(Collectors.toMap(
     		            p -> Long.valueOf(p.get("product_id").toString()),
     		            p -> ((Number) p.get("quantity")).intValue()
     		        ));

     		    Map<Long, Integer> getMap = getProducts.stream()
     		        .collect(Collectors.toMap(
     		            p -> Long.valueOf(p.get("product_id").toString()),
     		            p -> ((Number) p.get("quantity")).intValue()
     		        ));

     		    bxgy.setBuyProducts(buyMap);
     		    bxgy.setGetProducts(getMap);
     		    bxgy.setRepetitionLimit(((Number) details.get("repition_limit")).intValue());

     		    coupon = bxgy;
     			
     		
     		default:
     			throw new RuntimeException("Invalid coupon type: " + type);
		}
		
		Coupon saved = couponRepository.save(coupon);
		return saved;
	 
	 }

	public Map<String, Object> getApplicableCoupons(Map<String, Object> cartMap) {
		List<Map<String, Object>> itemMaps = (List<Map<String, Object>>) cartMap.get("items");
        List<CartItem> items = itemMaps.stream()
                .map(i -> new CartItem(
                        Long.valueOf(i.get("product_id").toString()),
                        ((Number) i.get("quantity")).intValue(),
                        Double.valueOf(i.get("price").toString())
                ))
                .collect(Collectors.toList());

        CartRequest cart = new CartRequest();
        cart.setItems(items);

        // Fetch all coupons from DB
        List<Coupon> coupons = couponRepository.findAll();
        List<Map<String, Object>> applicableCoupons = new ArrayList<>();

        for (Coupon c : coupons) {
            var service = couponServiceFactory.getService(c);

            if (service.isApplicable(c, cart)) {
                double discount = service.calculateDiscount(c, cart);
                Map<String, Object> couponInfo = new HashMap<>();
                couponInfo.put("coupon_id", c.getId());
                couponInfo.put("type", c.getType());
                couponInfo.put("discount", discount);
                applicableCoupons.add(couponInfo);
            }
        }

        Map<String, Object> response = new HashMap<>();
        response.put("applicable_coupons", applicableCoupons);

        return response;
	}
	
	
	 
}
